import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useTranslation } from "@/i18n";
import { Sparkles, RefreshCcw, Trash2 } from "lucide-react";

function buildSampleQuiz() {
  const now = new Date();
  return {
    topic: "AscendaIA autogenerated quiz",
    createdBy: "AscendaIA",
    createdAt: now.toLocaleString(),
    status: "draft",
    total: 10,
    assignedTo: ["Everyone"],
    questions: [
      { id: "ai-1", prompt: "What is the primary goal of the Ascenda mentorship program?" },
      { id: "ai-2", prompt: "List two benefits of using digital learning journeys." },
      { id: "ai-3", prompt: "Describe how AI can support personalised learning." },
      { id: "ai-4", prompt: "Which KPIs should be reviewed weekly in the mentorship squad?" },
    ],
  };
}

export function AscendaIASection({ attachedQuiz, onAttach }) {
  const { t } = useTranslation();
  const [isGenerating, setIsGenerating] = React.useState(false);
  const timeoutRef = React.useRef(null);

  React.useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  const handleGenerate = React.useCallback(() => {
    if (isGenerating) return;
    setIsGenerating(true);
    timeoutRef.current = setTimeout(() => {
      onAttach?.(buildSampleQuiz());
      setIsGenerating(false);
    }, 600);
  }, [isGenerating, onAttach, timeoutRef]);

  const handleRemove = React.useCallback(() => {
    onAttach?.(null);
  }, [onAttach]);

  return (
    <Card className="border border-dashed border-brand/40 bg-surface2">
      <CardHeader className="flex flex-col gap-3 border-b border-border/50 pb-4 sm:flex-row sm:items-center sm:justify-between">
        <div>
          <CardTitle className="flex items-center gap-2 text-base text-primary">
            <Sparkles className="h-5 w-5 text-brand" />
            {t("courseForm.quizzes.aiTitle", "AscendaIA recommendations")}
          </CardTitle>
          <p className="text-xs text-muted">
            {t(
              "courseForm.quizzes.aiDescription",
              "Let AscendaIA craft a ready-to-use quiz suggestion for your learners.",
            )}
          </p>
        </div>
        <div className="flex w-full flex-col gap-2 sm:w-auto sm:flex-row">
          <Button
            type="button"
            variant="outline"
            className="border-brand/60 text-brand hover:bg-brand/10"
            onClick={handleGenerate}
            disabled={isGenerating}
          >
            <RefreshCcw className="mr-2 h-4 w-4" />
            {isGenerating
              ? t("courseForm.quizzes.aiGenerating", "Generating…")
              : t("courseForm.quizzes.aiGenerate", "Generate suggestion")}
          </Button>
          {attachedQuiz && (
            <Button type="button" variant="ghost" onClick={handleRemove} className="text-error hover:text-error">
              <Trash2 className="mr-2 h-4 w-4" />
              {t("common.actions.remove")}
            </Button>
          )}
        </div>
      </CardHeader>
      <CardContent className="space-y-3 text-sm text-muted">
        {attachedQuiz ? (
          <div className="space-y-2 rounded-xl border border-brand/40 bg-brand/5 p-4 text-left">
            <div className="flex flex-wrap items-start justify-between gap-2 text-sm">
              <div>
                <p className="font-semibold text-primary">
                  {attachedQuiz.topic} · {attachedQuiz.questions?.length || attachedQuiz.total || 0}{" "}
                  {t("courseForm.quizzes.questionLabel", "questions")}
                </p>
                <p className="text-xs text-muted">
                  {attachedQuiz.createdBy} • {attachedQuiz.createdAt}
                </p>
              </div>
              {attachedQuiz.assignedTo?.length ? (
                <span className="rounded-full bg-brand/10 px-3 py-1 text-xs text-brand">
                  {attachedQuiz.assignedTo.join(", ")}
                </span>
              ) : null}
            </div>
            <ul className="space-y-1 text-xs">
              {(attachedQuiz.questions || []).slice(0, 4).map((question) => (
                <li key={question.id} className="flex items-start gap-2">
                  <span className="mt-1 block h-1.5 w-1.5 rounded-full bg-brand" />
                  <span className="text-foreground/90">{question.prompt}</span>
                </li>
              ))}
              {(attachedQuiz.questions?.length || 0) > 4 && (
                <li className="italic text-muted">
                  +{(attachedQuiz.questions?.length || 0) - 4} {t("courseForm.quizzes.more", "more suggestions")}
                </li>
              )}
            </ul>
          </div>
        ) : (
          <p>
            {t(
              "courseForm.quizzes.aiEmpty",
              "AscendaIA can suggest a ready-to-attach quiz. Generate one above to attach it instantly.",
            )}
          </p>
        )}
      </CardContent>
    </Card>
  );
}

